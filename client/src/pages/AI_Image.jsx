import React, { useEffect, useState } from 'react';
import { MDBContainer, MDBNavbar, MDBBtn } from 'mdb-react-ui-kit';
import { useNavigate } from "react-router";
import { Link } from "react-router-dom";
import Container from 'react-bootstrap/Container';
import { Card, FormField, Loader } from '../components/tailwind'
import { logo } from '../assets'
import CreatePost from './AI_Image_post'

const RenderCards = ({ data, title }) => {
    if (data?.length > 0) {
      return (
        data.map((post) => <Card key={post._id} {...post} />)
      );
    }
  
    return (
      <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
    );
  };

export default function AI_Image() {
    const [loading, setLoading] = useState(false);
    const [isShowCreatePost, setIsShowCreatePost] = useState(false);
    const [allPosts, setAllPosts] = useState(null);

    const [searchText, setSearchText] = useState('');
    const [searchTimeout, setSearchTimeout] = useState(null);
    const [searchedResults, setSearchedResults] = useState(null);
    const navigate = useNavigate();

    function HandleLogout() {
        localStorage.clear();
        navigate('/');
    }

    function toggleShow() {
        setIsShowCreatePost(!isShowCreatePost);
    }

    const fetchPosts = async () => {
        setLoading(true);

        try {
        const response = await fetch('http://localhost:8080/api/v1/post', {
            method: 'GET',
            headers: {
            'Content-Type': 'application/json',
            },
        });

        if (response.ok) {
            const result = await response.json();
            setAllPosts(result.data.reverse());
        }
        } catch (err) {
        alert(err);
        } finally {
        setLoading(false);
        }
    };

    useEffect(() => {
        fetchPosts();
    }, []);

    const handleSearchChange = (e) => {
        clearTimeout(searchTimeout);
        setSearchText(e.target.value);

        setSearchTimeout(
        setTimeout(() => {
            const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
            setSearchedResults(searchResult);
        }, 500),
        );
    };

  return (
    <>
        <MDBNavbar scrolling dark expand="md" fixed="top">
        <MDBContainer fluid className='justify-content-start'>
            <MDBBtn href='/api/dashboard' className='me-1' color='primary' >
            BACK
            </MDBBtn>
            <MDBBtn href='/api/profile' className='me-1' color='warning' >
            MY
            </MDBBtn>
            <MDBBtn onClick={HandleLogout} className='me-1' color='danger'>
            LOGOUT
            </MDBBtn>
        </MDBContainer>
        </MDBNavbar>

        <div className='MainContainer'>
        <Container className="p-5 mb-10">
            <header className="w-full flex justify-between items-center bg-white sm:px-8 px-4 py-4 border-b border-b-[#e6ebf4]">
                <img src={logo} alt="logo" className="w-28 object-contain" />
                <MDBBtn onClick={toggleShow} className='me-1' color='info'>{isShowCreatePost ? "MAIN" : "CREATE"}</MDBBtn>
            </header>
            <main className="sm:p-8 px-4 py-8 w-full bg-[#f9fafe] min-h-[calc(100vh-73px)]">
                {isShowCreatePost ? (
                    <CreatePost /> 
                    ) : (
                    <section className="max-w-7xl mx-auto">
                    <div>
                        <h1 className="font-extrabold text-[#222328] text-[32px]">The Community Showcase</h1>
                        <p className="mt-2 text-[#666e75] text-[14px] max-w-[500px]">Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
                    </div>

                    <div className="mt-16">
                        <FormField
                        labelName="Search posts"
                        type="text"
                        name="text"
                        placeholder="Search something..."
                        value={searchText}
                        handleChange={handleSearchChange}
                        />
                    </div>

                    <div className="mt-10">
                        {loading ? (
                        <div className="flex justify-center items-center">
                            <Loader />
                        </div>
                        ) : (
                        <>
                            {searchText && (
                            <h2 className="font-medium text-[#666e75] text-xl mb-3">
                                Showing Resuls for <span className="text-[#222328]">{searchText}</span>:
                            </h2>
                            )}
                            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
                            {searchText ? (
                                <RenderCards
                                data={searchedResults}
                                title="No Search Results Found"
                                />
                            ) : (
                                <RenderCards
                                data={allPosts}
                                title="No Posts Yet"
                                />
                            )}
                            </div>
                        </>
                        )}
                    </div>
                    </section> )
                }
            </main>
         </Container>
      </div>
    </>
  );
}